package com.leixing.动态规划.背包DP;

/**
 *给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目 ：
 * nums[a] + nums[b] + nums[c] == nums[d] ，且
 * a < b < c < d
 * 示例 1：
 * 输入：nums = [1,2,3,6]
 * 输出：1
 * 解释：满足要求的唯一一个四元组是 (0, 1, 2, 3) 因为 1 + 2 + 3 == 6 。
 * 示例 2：
 * 输入：nums = [3,3,6,4,5]
 * 输出：0
 * 解释：[3,3,6,4,5] 中不存在满足要求的四元组。
 * 示例 3：
 * 输入：nums = [1,1,1,3,5]
 * 输出：4
 * 解释：满足要求的 4 个四元组如下：
 * - (0, 1, 2, 3): 1 + 1 + 1 == 3
 * - (0, 1, 3, 4): 1 + 1 + 3 == 5
 * - (0, 2, 3, 4): 1 + 1 + 3 == 5
 * - (1, 2, 3, 4): 1 + 1 + 3 == 5
 * 提示：
 * 4 <= nums.length <= 50
 * 1 <= nums[i] <= 100
 * 多维背包
 * 利用等式关系 nums[a] + nums[b] + nums[c] = nums[d]，具有明确的「数值」和「个数」关系，可将问题抽象为组合优化问题求方案数。
 * 限制组合个数的维度有两个，均为「恰好」限制，转换为「二维费用背包问题求方案数」问题。
 * 定义 f[i][j][k]为考虑前 i 个物品（下标从 1 开始），凑成数值恰好 j，使用个数恰好为 k 的方案数。
 * 最终答案为 \sum_{i = 3}^{n - 1}(f[i][nums[i]][3])
 *  (f[i][nums[i]][3])，起始状态 f[0][0][0] = 1代表不考虑任何物品时，所用个数为 0，凑成数值为 0 的方案数为 11。
 * 不失一般性考虑 f[i][j][k]该如何转移，根据 nums[i - 1] 是否参与组合进行分情况讨论：
 * nums[i - 1]nums[i−1] 不参与组成，此时有：f[i - 1][j][k]
 * nums[i - 1]nums[i−1] 参与组成，此时有：f[i - 1][j - t][k - 1];
 * 最终 f[i][j][k]f[i][j][k] 为上述两种情况之和，最终统计 \sum_{i = 3}^{n - 1}(f[i][nums[i]][3])
 *  (f[i][nums[i]][3]) 即是答案。
 * 利用 f[i][j][k] 仅依赖于 f[i - 1][j][k] 和 j k 维度值更小的 f[i - 1][X][X]，可进行维度优化，并在转移过程中统计答案。
 */
public class 统计特殊四元组 {
    public int countQuadruplets(int[] nums) {
        int n=nums.length;
        int[][][] f=new int[n+1][110][4];
        f[0][0][0]=1;
        for (int i=1;i<=n;i++){
            int t=nums[i - 1];
            for (int j=0;j<=110;j++){
                for (int k=0;k<=4;k++){
                    f[i][j][k] += f[i - 1][j][k];
                    if (j >=t && k -1 >=0){
                        f[i][j][k]+=f[i - 1][j - t][k - 1];
                    }
                }
            }
        }
        int ans=0;
        for (int i =3;i<n;i++)
            ans += f[i][nums[i]][3];
        return ans;
    }
}
//时间复杂度：O(n * 110 * 4)
//空间复杂度：O(n * 110 * 4)
