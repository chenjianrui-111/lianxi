package com.xiaochao.队列和栈;

/**
 * 给你一个括号字符串 s ，它只包含字符 '(' 和 ')' 。一个括号字符串被称为平衡的当它满足：
 * 任何左括号 '(' 必须对应两个连续的右括号 '))' 。
 * 左括号 '(' 必须在对应的连续两个右括号 '))' 之前。
 * 比方说 "())"， "())(())))" 和 "(())())))" 都是平衡的， ")()"， "()))" 和 "(()))" 都是不平衡的。
 * 你可以在任意位置插入字符 '(' 和 ')' 使字符串平衡。
 * 请你返回让 s 平衡的最少插入次数。
 * 示例 1：
 * 输入：s = "(()))"
 * 输出：1
 * 解释：第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。我们需要在字符串结尾额外增加一个 ')' 使字符串变成平衡字符串 "(())))" 。
 */
public class 平衡括号字符串的最少插入次数 {
    public int minInsertions(String s) {
        int res = 0, need = 0;//res 记录人为添加的左右括号维护括号平衡；need记录需要的右括号
        for(char c : s.toCharArray()){
            if(c == '('){
                need += 2;
                //因为右括号数量必须是偶数，所以当遇到左括号时判断need，如果是奇数则添加一个右括号以平衡，添加之后，need--
                if(need % 2 == 1){
                    res++;
                    need--;
                }
            }
            else{//碰到右括号
                //右括号需求-1
                need--;
                //如果需求剪到负，说明需要添加一个左括号保持满足规则，又因为一个左括号匹配两个右，于是need=1
                if(need == -1){
                    need = 1;//右括号需求由 -1--->+1
                    res++;//添加一个左以满足规则
                }
            }
        }
        return res + need;
    }
}
