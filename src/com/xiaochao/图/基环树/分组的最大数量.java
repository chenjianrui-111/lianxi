package com.xiaochao.图.基环树;

/**
 * 给你一个正整数数组 grades ，表示大学中一些学生的成绩。你打算将 所有 学生分为一些 有序 的非空分组，其中分组间的顺序满足以下全部条件：
 * 第 i 个分组中的学生总成绩 小于 第 (i + 1) 个分组中的学生总成绩，对所有组均成立（除了最后一组）。
 * 第 i 个分组中的学生总数 小于 第 (i + 1) 个分组中的学生总数，对所有组均成立（除了最后一组）。
 * 返回可以形成的 最大 组数。
 * 示例 1：
 * 输入：grades = [10,6,12,7,3,5]
 * 输出：3
 * 解释：下面是形成 3 个分组的一种可行方法：
 * - 第 1 个分组的学生成绩为 grades = [12] ，总成绩：12 ，学生数：1
 * - 第 2 个分组的学生成绩为 grades = [6,7] ，总成绩：6 + 7 = 13 ，学生数：2
 * - 第 3 个分组的学生成绩为 grades = [10,3,5] ，总成绩：10 + 3 + 5 = 18 ，学生数：3
 * 可以证明无法形成超过 3 个分组。
 * s1 <= s2
 * s1 < s2 + x(x > 0)
 * 假设有 x 个组 1+2+3+。。。+x -> {x * (1+x)}/2 -> x^2 + x -2n <= 0 -> x <=[(-1 + Math.squ(1 + 8n)) / 2]
 */
public class 分组的最大数量 {
    public int maximumGroups(int[] grades) {
        int n = grades.length;
        int x = (int) ((-1 + Math.sqrt(1 + 8*n)) * 0.5);
        if (((x + 1) * (x + 2)) / 2 <= n){
            x += 1;
        }
        return x;
    }
}
