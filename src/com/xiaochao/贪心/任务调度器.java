package com.xiaochao.贪心;

/**
 * 给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。
 * 然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。
 * 你需要计算完成所有任务所需要的 最短时间 。
 * 示例 1：
 * 输入：tasks = ["A","A","A","B","B","B"], n = 2
 * 输出：8
 * 解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B
 *      在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。
 * 1.有贪心和数学的成分在里面
 * 2.我们统计每个字母出现的次数
 * 3.只用管最大的次数记为max,假如最大次数为max的字母只有一种，记为1
 * 4.然后插空，我们需要插空(max - 1) * n (例如3个人中间有2个空，这个就不用说了吧，这道题每个空里面插n个)，其次因为要算任务时间，
 * 每个任务和待命都要一个单位时间，所以再加上最大次数的字母个数，如果我们先不算最后那个，就是(max - 1) * n + max - 1，
 * 在化简提取公因式得(max - 1) * (n + 1)，最后加上最后一个为(max - 1) * (n + 1) + 1
 * 5.但是如果最大次数出现相同的情况，最大次数相同的字母都会剩下一个，所以我们记录最大次数的同时还要记录出现最大次数的字母有多少种(count)，
 * 即后面的1变为count，式子为(max - 1) * (n + 1) + count
 * 6.如果结果算出来，比数组长度还小，是不可能的，所以我们还需将上述结果与数组长度比较，返回两个中的最大值。
 */
public class 任务调度器 {
    public int leastInterval(char[] tasks, int n) {
        int len = tasks.length;
        if (n == 0 || len == 1) {
            return len;
        }
        int[] cnt = new int[26];
        for (char task : tasks) {
            cnt[task - 'A']++;
        }

        int count = 0;
        int max = 0;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > max) {
                max = cnt[i];
                count = 1;
            } else if (cnt[i] == max) {
                count++;
            }
        }

        return Math.max(len, (max - 1) * (n + 1) + count);
    }
}
