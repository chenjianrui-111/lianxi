package com.xiaochao.前缀和;

/**
 * 给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。
 * 子数组 定义为原数组中的一个连续子序列。
 * 请你返回 arr 中 所有奇数长度子数组的和 。
 * 示例 1：
 * 输入：arr = [1,4,2,5,3]
 * 输出：58
 * 解释：所有奇数长度子数组和它们的和为：
 * [1] = 1
 * [4] = 4
 * [2] = 2
 * [5] = 5
 * [3] = 3
 * [1,4,2] = 7
 * [4,2,5] = 11
 * [2,5,3] = 10
 * [1,4,2,5,3] = 15
 * 我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
 * 提示：
 * 1 <= arr.length <= 100
 * 1 <= arr[i] <= 1000
 */

/**
 * 前缀和 枚举所有长度为奇数的子数组，我们可以通过「枚举长度 - 枚举左端点，并计算右端点」的两层循环来做。
 * 而对于区间 [l, r] 的和问题，可以直接再加一层循环来做，这样复杂度来到了 O(n3)，但本题
 * 数据范围只有 100，也是可以过的。
 * 对于此类区间求和问题，我们应当想到使用「前缀和」进行优化：使用 O(n) 的复杂度预处理
 * 出前缀和数组，每次查询 [l, r] 区间和可以在 O(1) 返回。
 */
public class 所有奇数长度子数组的和 {
    public int sumOddLengthSubarrays(int[] arr) {
        int n =arr.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n ; i++) {
            sum[i] = sum[i - 1] + arr[i - 1];
        }
        int ans = 0;
        for (int len = 1; len <= n ; len += 2) {
            for (int l = 0; l + len -1 < n ; l++) {
                int r = len + l  - 1;
                ans += sum[r + 1] - sum[l];
            }
        }
        return ans;
    }
}
//• 时间复杂度：O(n2) • 空间复杂度：O(n)
